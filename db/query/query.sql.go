// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package query

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const campaignByID = `-- name: CampaignByID :one
with total as (
    select sum(amount) as total_amount, campaign_id
    from donations
    group by campaign_id
)
select c.id, c.organization_id, c.title, c.description, c.goal_amount, t.total_amount
from campaigns c left join total t on c.id = t.campaign_id
where c.id = $1
`

type CampaignByIDRow struct {
	ID             int32
	OrganizationID pgtype.Int4
	Title          string
	Description    pgtype.Text
	GoalAmount     pgtype.Int4
	TotalAmount    pgtype.Int8
}

func (q *Queries) CampaignByID(ctx context.Context, id int32) (*CampaignByIDRow, error) {
	row := q.db.QueryRow(ctx, campaignByID, id)
	var i CampaignByIDRow
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Title,
		&i.Description,
		&i.GoalAmount,
		&i.TotalAmount,
	)
	return &i, err
}

const createCampaign = `-- name: CreateCampaign :one
insert into campaigns (organization_id, title, description, goal_amount, start_date, end_date)
       values ($1, $2, $3, $4, $5, $6) returning id
`

type CreateCampaignParams struct {
	OrganizationID pgtype.Int4
	Title          string
	Description    pgtype.Text
	GoalAmount     pgtype.Int4
	StartDate      pgtype.Date
	EndDate        pgtype.Date
}

func (q *Queries) CreateCampaign(ctx context.Context, arg *CreateCampaignParams) (int32, error) {
	row := q.db.QueryRow(ctx, createCampaign,
		arg.OrganizationID,
		arg.Title,
		arg.Description,
		arg.GoalAmount,
		arg.StartDate,
		arg.EndDate,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteCampaign = `-- name: DeleteCampaign :exec
delete from campaigns where id = $1
`

func (q *Queries) DeleteCampaign(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteCampaign, id)
	return err
}

const donate = `-- name: Donate :exec
insert into donations (user_id, campaign_id, amount) values ($1, $2, $3)
`

type DonateParams struct {
	UserID     pgtype.Int4
	CampaignID pgtype.Int4
	Amount     int32
}

func (q *Queries) Donate(ctx context.Context, arg *DonateParams) error {
	_, err := q.db.Exec(ctx, donate, arg.UserID, arg.CampaignID, arg.Amount)
	return err
}

const donationsByUserID = `-- name: DonationsByUserID :many
select id, campaign_id, amount, donated_at from donations where user_id = $1
`

type DonationsByUserIDRow struct {
	ID         int32
	CampaignID pgtype.Int4
	Amount     int32
	DonatedAt  pgtype.Timestamp
}

func (q *Queries) DonationsByUserID(ctx context.Context, userID pgtype.Int4) ([]*DonationsByUserIDRow, error) {
	rows, err := q.db.Query(ctx, donationsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*DonationsByUserIDRow
	for rows.Next() {
		var i DonationsByUserIDRow
		if err := rows.Scan(
			&i.ID,
			&i.CampaignID,
			&i.Amount,
			&i.DonatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
